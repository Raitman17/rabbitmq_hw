services:
  database:
    image: postgres:17.4-alpine3.21
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - 127.0.0.1:5434:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $DB_USER -d $DB_NAME"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - app-network

  migrations:
    image: migrate/migrate
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - ./migrations:/migrations
    networks:
      - app-network
    command:
      [
        "-path",
        "/migrations",
        '-database',
        "postgres://$DB_USER:$DB_PASS@database:5432/$DB_NAME?sslmode=disable",
        "up",
      ]

  rabbitmq:
    image: rabbitmq:4.0-management-alpine
    container_name: rabbitmq
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics check_port_connectivity"]
      interval: 30s
      timeout: 5s
      retries: 10
      start_period: 20s
    networks:
      - app-network
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS} 
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq/

  consumer_1:
    build:
      context: .
      dockerfile: ./consumer/Dockerfile
      args:
        - TABLE_NAME_DEFAULT=consumer_1
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - app-network

  consumer_2:
    build:
      context: .
      dockerfile: ./consumer/Dockerfile
      args:
        - TABLE_NAME_DEFAULT=consumer_2
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - app-network
  
  producer:
    build:
      context: .
      dockerfile: ./producer/Dockerfile
    depends_on:
      database:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - app-network

volumes:
  rabbitmq-data:
    driver: local

networks:
  app-network:
    driver: bridge